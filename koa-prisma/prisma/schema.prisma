generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model blog {
  id       Int      @id @default(autoincrement())
  title    String
  url      String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  // 0: everyone can see
  // 1: public but only followers can see
  // 2: public
  privacy  Int      @default(0)
  visit    Int
  tags     tag[]
  user     user?    @relation(fields: [userId], references: [id])
  userId   Int?
}

model dynamic {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  // image url
  image    String
  text     String
  privacy  Int      @default(0)
  tags     tag[]
  user     user?    @relation(fields: [userId], references: [id])
  userId   Int?
}

model tag {
  id        Int      @id @default(autoincrement())
  text      String
  blog      blog?    @relation(fields: [blogId], references: [id])
  blogId    Int?
  dynamic   dynamic? @relation(fields: [dynamicId], references: [id])
  dynamicId Int?
}

model user {
  id         Int       @id @default(autoincrement())
  email      String?   @unique
  username   String
  password   String
  admin      Boolean   @default(false)
  blogs      blog[]
  dynamics   dynamic[]
  followers  follow[]  @relation("follower")
  followings follow[]  @relation("following")
}

// see https://www.prisma.io/docs/concepts/components/prisma-schema/relations/self-relations#many-to-many-self-relations
model follow {
  follower    user @relation("follower", fields: [followerId], references: [id])
  followerId  Int
  following   user @relation("following", fields: [followingId], references: [id])
  followingId Int

  @@id([followerId, followingId])
}
